import pygame
import sys
import math

# Initialize Pygame
pygame.init()

# Set up display
width, height = 800, 600
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("Aim at Circle")

# Colors
white = (255, 255, 255)
red = (255, 0, 0)

# Circle parameters
circle_radius = 50
circle_center = (width // 2, height // 2)

# Main game loop
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    # Get mouse position
    mouse_x, mouse_y = pygame.mouse.get_pos()

    # Calculate angle to the circle center
    angle = math.atan2(circle_center[1] - mouse_y, circle_center[0] - mouse_x)

    # Calculate the aiming position on the circle
    aiming_x = circle_center[0] - int(circle_radius * math.cos(angle))
    aiming_y = circle_center[1] - int(circle_radius * math.sin(angle))

    # Draw everything
    screen.fill(white)
    pygame.draw.circle(screen, red, circle_center, circle_radius)
    pygame.draw.line(screen, red, circle_center, (aiming_x, aiming_y), 2)

    pygame.display.flip()
import cv2
import numpy as np

def outline_body(image_path):
    # Load the image
    image = cv2.imread(image_path)
    
    # Load the pre-trained upper body classifier
    body_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_upperbody.xml')

    # Convert the image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Detect upper bodies in the image
    bodies = body_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)

    # Draw rectangles around the detected bodies
    for (x, y, w, h) in bodies:
        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)

    # Display the result
    cv2.imshow('Outlined Body', image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

# Example usage
image_path = 'path/to/your/image.jpg'
outline_body(image_path)
